from __future__ import print_function
import json
import time
import random

import telethon
from pyrogram import Client, filters, ContinuePropagation
from pyrogram.types import Message

import io
from telethon.sync import TelegramClient
from telethon.errors.rpcerrorlist import PeerFloodError, SessionPasswordNeededError
from telethon.tl.functions.channels import JoinChannelRequest

api_id = 29
api_hash = "e0c75275"
phone = '+'


client = TelegramClient(phone, api_id, api_hash)
client.connect()

app = Client(
    "bio",
    api_id=api_id,
    api_hash=api_hash,
    phone_number=phone
)
if not client.is_user_authorized():
    #–∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–¥–Ω–∞—Ä–∞–∑–æ–≤—ã–π –∫–æ–¥
    client.send_code_request(phone)
    try:
        client.sign_in(phone, input('Enter verification code: '))
    #–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
    except SessionPasswordNeededError:
        client.sign_in(password=input("Enter password: "))

chats = [dialog for dialog in client.get_dialogs() if dialog.is_group]
print('From which chat you want to parse members:')

# with open('messages.json', 'r', encoding="utf-8") as f:
#     messages = f.readlines()

# message = ('ü•Å–û—Ç–∫—Ä—ã—Ç–∏—è –º–∞–≥–∞–∑–∏–Ω–∞ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º–µ , –Ω–µ –º–∞–ª–æ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–∞–≥–∞–∑–∏–Ω , —Ä–∞–±–æ—Ç–∞—é—â–∏–π –Ω–∞ —Ñ–æ—Ä—É–º–∞—Ö- –æ—Ç–∫—Ä—ã–ª—Å—è –∏ –≤ —Ç–≥, '
#            '–æ—Ç–∫—Ä—ã–≤–∞–π—Ç–µ —Å–∞–ª—é—Ç üéñ\n\nüíé–£ –Ω–∞—Å –≤ –Ω–∞–ª–∏—á–∏–µ –æ–≥—Ä–æ–º–Ω–æ–µ —á–∏—Å–ª–æ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –¥–∞—Ä–∫–Ω–µ—Ç–∞ üíé\n\n–ù–µ –±—É–¥–µ–º —Ç—è–Ω—É—Ç—å, —Å–º–æ—Ç—Ä–∏—Ç–µ —Å–∞–º–∏:\n'
#            '‚Ä¢–î–æ—Å–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–π (–∞–≤–∏—Ç–æ, wallapop, subit–æ –∏ –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ)\n‚Ä¢–ë–ê, –ö–∞—Ä—Ç—ã –∏ –õ–ö —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –±–∞–Ω–∫–æ–≤ –∏ —Å—Ç—Ä–∞–Ω '
#            '(–í –Ω–∞–ª–∏—á–∏–µ —Å–æ—Ç–Ω–∏ –±–∞–Ω–∫–æ–≤ —Å–æ –≤—Å–µ–≥–æ –º–∏—Ä–∞ üåç )\n‚Ä¢–ê–∫–∫–∞—É–Ω—Ç—ã, –í–∏—Ä—Ç. –±–∞–Ω–∫–∏, –ö—Ä–∏–ø—Ç–æ–±–∏—Ä–∂—ã\n‚Ä¢–¢–≥ –ø—Ä–µ–º–∏—É–º\n'
#            '‚Ä¢–§–∏–∑. —Å–∏–º –∏ –≤–∞—Ç—Å–∞–ø (–æ–≥—Ä–æ–º–Ω—ã–π –≤—ã–±–æ—Ä –≥–µ–æ)\n‚Ä¢–î–µ–¥–∏–∫\n‚Ä¢–ö–æ—à–µ–ª—å–∫–∏\n‚Ä¢–¢–≥ –∞–∫–∫–∞—É–Ω—Ç—ã –∏ –°–æ—Ü.—Å–µ—Ç–∏\n‚Ä¢–ú–∞–Ω—É–∞–ª—ã\n–ü–µ—Ä–µ—Ö–æ–¥–∏'
#            ' —Å–∫–æ—Ä–µ–µ , –ø–æ–∫–∞ –º—ã –æ—Ç–∫—Ä—ã–ª–∏ –¥–æ—Å—Ç—É–ø:\n\nüí°–°–°–´–õ–ö–ê : @accesoria_perehodnik\n\n–¥–ª—è —Ç—ç–≥–∞: –∫—É–ø–∏—Ç—å, –ø—Ä–æ–¥–∞–º, –ø—Ä–æ–¥–∞—é,'
#            ' —Å–∏–º–∫–∞, –ª–∫, –∫–∞—Ä—Ç—ã, revolut, bunq, lydia, n26, revolut —Ä–∞–π—Ñ—Ñ–∞–π–∑–µ–Ω, —Å–±–µ—Ä, –∫—Ä–∏–ø—Ç–æ–∫–æ–º, —è–Ω–¥–µ–∫—Å, –∫–∞—Ä—à–µ—Ä–∏–Ω–≥,'
#             ' –ø–≤–∑, —Ç–µ–ª–µ–≥—Ä–∞–º–º –∞–∫–∫–∞—É–Ω—Ç—ã, paypal,  –∞–≤–∏—Ç–æ, –≤ –Ω–∞–ª–∏—á–∏–µ, –∞–∫–∫, –±–∞–Ω–∫, –¥–µ–¥–∏–∫, –ø—Ä–æ–∫—Å–∏, –≤–ø–Ω, —Ç–≥ –∞–∫–∫–∏, —Ç–≥ –ø—Ä–µ–º, –∫–∞—Ä—à'
#             ', –≤–µ—Ä–∏—Ñ, –¥–æ–∫—É–º–µ–Ω—Ç—ã, –≤–∞—Ç—Å–∞–ø, —Ç–∏–Ω–µ–∫, –±–∫, bybit, binance')

message = ('–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Ç–µ–ª–µ–≥—Ä–∞–º –∞–∫–∫–∞—É–Ω—Ç—ã –¥–ª—è –ª—é–±—ã—Ö –≤–∞—à–∏—Ö –Ω—É–∂–¥.\n–°–ø–∞–º / –∏–Ω–≤–∞–π—Ç / –ª–∏—á–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ.\n\n'
           '–§–æ—Ä–º–∞—Ç—ã: TDATA –¥–ª—è Telegram Portable –≤–µ—Ä—Å–∏–∏, SESSION+JSON –¥–ª—è —Å–æ—Ñ—Ç–∞.\n\n–ì–µ–æ: \nüá∑üá∫ RU (+7)\nüá¨üáß GB (+44)\n'
           'üáÆüá© ID (+62)\nüá∞üáø KZ (+77)\nüá∑üá¥ RO (+40)\nüá≥üá± NL (+31)\nüá´üá∑ FR (+33)\nüá≤üáΩ MX (+52)\nüá®üá¶ CA (+1)\n\n'
           '–û—Ç–ª—ë–∂–∫–∞ –æ—Ç 7 –¥–Ω–µ–π –¥–æ 3 –º–µ—Å—è—Ü–µ–≤ –∏ –≤—ã—à–µ.\n\n–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ —Ä–∞–∑–¥–∞—á–∏ —Ç–≥ –∞–∫–∫–æ–≤ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤!\n\n'
           '_____________\nüìù –°—Å—ã–ª–∫–∞: @accesoria_perehodnik')

[print(str(chats.index(i) + 1) + ' - ' + i.title) for i in chats]
delay = random.randint(15, 40)
chatt = random.choice(chats)

file = '2.jpg'
i = 0
#—Å–¥–µ–ª–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –Ω–∞ –ø–µ—Ä–≤—ã–µ 40 —é–∑–µ—Ä–æ–≤ –∏–∑ —Å–ø–∏—Å–∫–∞
while True:
    for chat in chats:
        print("Sending Message to: ", chat)
        try:
            #–æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            delay = random.randint(70, 110)
            i += 1
            client.send_file(chat, file, caption=message)
            print("Message sent to: ", chat)
            print(delay)
            time.sleep(delay)
            random.shuffle(chats)
        #–í–æ–∑–º–æ–∂–Ω–æ —Å–ª–æ–≤–∏—Ç—å Flood Error, –ø–æ—ç—Ç–æ–º—É –ª—É—á—à–µ —Å—Ä–∞–∑—É –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å —Å–ø–∞–º –∏ —Ä–∞–∑–æ—Ä–≤–∞—Ç—å —Å–≤—è–∑—å
        except PeerFloodError:
            print("[!] Got Flood Error from telegram. \n[!] Try later.")
            app.stop()
            break
        # except You can't write in this chat:
        #
        except telethon.errors.rpcerrorlist.UserBannedInChannelError as e:
            print("[!] Error:", e, "\n UserBannedInChannelError")
            continue
        except telethon.errors.rpcerrorlist.ChatWriteForbiddenError as e:
            print("[!] Error:", e, "\n ChatWriteForbiddenError")
            client.kick_participant(chat.id, 'me')
            print('exit')
            continue
        # except Exception as e:
        #     print("[!] Error:", e, "\n Continue")
        #     continue
        except telethon.errors.rpcerrorlist.UserNotParticipantError as e:
            print("[!] Error:", e, "\n Continue")
            continue
        except telethon.errors.rpcerrorlist.SlowModeWaitError as e:
            print("[!] Error:", e, "\n Continue")
            continue
        except telethon.errors.rpcbaseerrors.ForbiddenError as e:
            try:
                client.send_message(chat, message)
            except:
                print("[!] Error:", e, "\n Continue")
            continue
        except Exception as e:
            continue



print('\nEnd of the program')
